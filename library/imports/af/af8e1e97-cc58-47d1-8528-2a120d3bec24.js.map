{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\level.js"],"names":["TowerPosNodeState","Invalid","Null","BuildMenu","Tower","UpdateMenu","cc","Class","extends","Component","properties","enemyPathNodePos","default","type","Node","towerPosNodes","buildMenuPrefab","Prefab","towerPrefabs","updateMenuPrefab","onLoad","i","length","node","setState","setTouchEvent","event","on","buildTower","bind","updateTower","sellTower","EventType","TOUCH_START","log","target","name","state","showBuildMenu","showUpdateMenu","closeMenu","menu","instantiate","parent","position","destroy","data","tower","onDestroy","off","param","取出需要关闭closeMenu的那个节点","start"],"mappings":"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","file":"level.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["import global from './global'\r\n//状态机\r\nconst TowerPosNodeState = {\r\n    //里面可以避免出现0\r\n    //不可用状态\r\n    Invalid: -1,\r\n    Null: 1,\r\n    BuildMenu: 2,\r\n    Tower: 3,\r\n    UpdateMenu:4 //升级塔的菜单\r\n};\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        //敌人的路径\r\n        enemyPathNodePos: {\r\n            default: [],\r\n            type: cc.Node\r\n        },\r\n        //塔的位置节点\r\n        towerPosNodes: {\r\n            default: [],\r\n            type: cc.Node\r\n        },\r\n        //菜单预制件，（前面写功能，后面写类型）\r\n        buildMenuPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        //塔的预制件\r\n        towerPrefabs: {\r\n            default: [],\r\n            type: cc.Prefab\r\n        },\r\n        updateMenuPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        }\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        for (let i = 0; i<this.towerPosNodes.length; i++) {\r\n            let node = this.towerPosNodes[i];\r\n            //最开始的时候给节点设置Null的状态\r\n            this.setState(node, TowerPosNodeState.Null);\r\n            //抽象出来的一个方法\r\n            this.setTouchEvent(node);\r\n        }\r\n        //全局变量,on一个建造塔的消息\r\n        global.event.on(\"build_tower\", this.buildTower.bind(this));\r\n        //接收升级塔的操作，并执行函数\r\n        global.event.on(\"update_tower\",this.updateTower.bind(this));\r\n        //接收卖掉塔的操作，并执行函数\r\n        global.event.on(\"sell_tower\",this.sellTower.bind(this));\r\n    },\r\n    setTouchEvent: function(node) {\r\n        //点击事件\r\n        node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n            cc.log(\"touch node name = \" + event.target.name);\r\n            //只有当node之前的状态为null的时候，显示当前节点菜单\r\n          if (node.state === TowerPosNodeState.Null) {\r\n            this.showBuildMenu(event.target);\r\n            //当塔的状态为Tower的时候显示升级菜单\r\n          }else if (node.state === TowerPosNodeState.Tower) {\r\n            this.showUpdateMenu(event.target);\r\n          }\r\n        })\r\n        \r\n    },\r\n    //显示菜单\r\n    showBuildMenu: function (node) {\r\n        //显示菜单之前先关闭菜单\r\n        this.closeMenu();\r\n         //初始化预制件\r\n        let menu = cc.instantiate(this.buildMenuPrefab);\r\n        //菜单的父节点等于当前节点\r\n        menu.parent = this.node;\r\n        //设置位置，也就是父节点的位置\r\n        menu.position = node.position;\r\n        //设置菜单出来后的状态\r\n        this.setState(node,TowerPosNodeState.BuildMenu);\r\n        node.menu = menu;\r\n    },\r\n    //显示升级菜单函数，主体是node，以level层作为父节点\r\n    showUpdateMenu: function (node) {  \r\n        //关掉建造菜单\r\n        this.closeMenu();\r\n        //新建一个升级菜单预制件实例\r\n        let menu = cc.instantiate(this.updateMenuPrefab);\r\n        //父节点设置为node\r\n        menu.parent = this.node;\r\n        menu.position = node.position;\r\n        //设置node状态为 升级菜单状态\r\n        this.setState(node,TowerPosNodeState.UpdateMenu);\r\n        //node的升级菜单就等于 这个实例的升级菜单\r\n        node.menu = menu;\r\n\r\n    },\r\n    //关掉菜单\r\n    closeMenu: function() {\r\n        //找到建造菜单是在哪个上面，遍历放置塔的节点的列表\r\n        for (let i = 0;i < this.towerPosNodes.length; i++) {\r\n            //取出节点\r\n            let node = this.towerPosNodes[i];\r\n            //检查他的状态，并关掉\r\n            if (node.state === TowerPosNodeState.BuildMenu) {\r\n                // buildMenu指的是预制件，BuildMenu指的是状态机属性\r\n                node.menu.destroy();\r\n                //设置节点状态为null\r\n                this.setState(node,TowerPosNodeState.Null);\r\n                //直接返回找到的节点\r\n                return node;\r\n            };\r\n            if (node.state === TowerPosNodeState.UpdateMenu) {\r\n                node.menu.destroy();\r\n                this.setState(node,TowerPosNodeState.Tower)\r\n                return node;\r\n            }\r\n        }\r\n    },\r\n    //设置状态机函数,这里指节点的状态\r\n    setState: function (node, state) { \r\n        //上次设置的状态与当前的状态是相等的，就返回,避免重复设置状态现象\r\n        if (node.state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case TowerPosNodeState.Null:\r\n                break;\r\n            case TowerPosNodeState.BuildMenu:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        node.state = state;\r\n    },\r\n    //实现建造塔的消息\r\n    buildTower: function (data) {\r\n        //检测事件监听器是否监听成功\r\n        cc.log(\"build tower\" + data )\r\n        //建造塔之前先关闭建造菜单,直接取到返回的节点\r\n        let node = this.closeMenu();\r\n        //然后就可以在这里创建一个塔\r\n        let tower = cc.instantiate(this.towerPrefabs[data]);\r\n        //塔的父节点设置成这个节点\r\n        tower.parent = this.node;\r\n        //塔的位置\r\n        tower.position = node.position;\r\n        //建造完塔之后，设置节点的状态\r\n        this.setState(node,TowerPosNodeState.Tower);\r\n        //给他附上值，方便控制\r\n        node.tower = tower;\r\n    },\r\n    //on消息之后就要去off,关闭这个消息，或者说关闭这个函数\r\n    onDestroy: function () { \r\n        global.event.off(\"build_tower\",this.buildTower);\r\n    },\r\n    //实现升级塔的方法\r\n    updateTower: function () {\r\n\r\n    },\r\n    //实现卖掉塔的方法\r\n    sellTower: function (param) {\r\n        //第一步，关闭menu\r\n        let node = this.closeMenu();\r\n        取出需要关闭closeMenu的那个节点\r\n    },\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}